--// ReplicatedStorage.SharedPackages._Index.roblox_roact@1.4.4.roact.createRef.spec (ModuleScript)

return function()
    local v_u_1 = require(script.Parent.Binding)
    local v_u_2 = require(script.Parent.Type)
    local v_u_3 = require(script.Parent.createRef)
    it("should create refs, which are specialized bindings", function()
        local v4 = v_u_3()
        expect(v_u_2.of(v4)).to.equal(v_u_2.Binding)
        expect(v4.current).to.equal(nil)
    end)
    it("should have a \'current\' field that is the same as the internal binding\'s value", function()
        local v5 = v_u_3()
        expect(v5.current).to.equal(nil)
        v_u_1.update(v5, 10)
        expect(v5.current).to.equal(10)
    end)
    it("should support tostring on refs", function()
        local v6 = v_u_3()
        expect(v6.current).to.equal(nil)
        expect((tostring(v6))).to.equal("RoactRef(nil)")
        v_u_1.update(v6, 10)
        expect((tostring(v6))).to.equal("RoactRef(10)")
    end)
    it("should not allow assignments to the \'current\' field", function()
        local v_u_7 = v_u_3()
        expect(v_u_7.current).to.equal(nil)
        v_u_1.update(v_u_7, 99)
        expect(v_u_7.current).to.equal(99)
        expect(function()
            v_u_7.current = 77
        end).to.throw()
        expect(v_u_7.current).to.equal(99)
    end)
    it("should return the same thing from getValue as its current field", function()
        local v8 = v_u_3()
        v_u_1.update(v8, 10)
        expect(v8:getValue()).to.equal(10)
        expect(v8:getValue()).to.equal(v8.current)
    end)
end