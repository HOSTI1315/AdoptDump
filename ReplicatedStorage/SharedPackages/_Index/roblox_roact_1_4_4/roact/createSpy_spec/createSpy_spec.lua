--// ReplicatedStorage.SharedPackages._Index.roblox_roact@1.4.4.roact.createSpy.spec (ModuleScript)

return function()
    local v_u_1 = require(script.Parent.createSpy)
    describe("createSpy", function()
        it("should create spies", function()
            local v2 = v_u_1(function() end)
            expect(v2).to.be.ok()
        end)
        it("should throw if spies are indexed by an invalid key", function()
            local v_u_3 = v_u_1(function() end)
            expect(function()
                return v_u_3.test
            end).to.throw()
        end)
    end)
    describe("value", function()
        it("should increment callCount when called", function()
            local v4 = v_u_1(function() end)
            v4.value()
            expect(v4.callCount).to.equal(1)
        end)
        it("should store all values passed", function()
            local v5 = v_u_1(function() end)
            v5.value(1, true, "3")
            expect(v5.valuesLength).to.equal(3)
            expect(v5.values[1]).to.equal(1)
            expect(v5.values[2]).to.equal(true)
            expect(v5.values[3]).to.equal("3")
        end)
        it("should return the value of the inner function", function()
            local v6 = v_u_1(function()
                return true
            end)
            expect(v6.value()).to.equal(true)
        end)
    end)
    describe("assertCalledWith", function()
        it("should throw if the number of values differs", function()
            local v_u_7 = v_u_1(function() end)
            v_u_7.value(1, 2)
            expect(function()
                v_u_7:assertCalledWith(1)
            end).to.throw()
        end)
        it("should throw if any value differs", function()
            local v_u_8 = v_u_1(function() end)
            v_u_8.value(1, 2)
            expect(function()
                v_u_8:assertCalledWith(1, 3)
            end).to.throw()
            expect(function()
                v_u_8:assertCalledWith(2, 3)
            end).to.throw()
        end)
    end)
    describe("captureValues", function()
        it("should throw if the number of values differs", function()
            local v_u_9 = v_u_1(function() end)
            v_u_9.value(1, 2)
            expect(function()
                v_u_9:captureValues("a")
            end).to.throw()
        end)
        it("should capture all values in a table", function()
            local v10 = v_u_1(function() end)
            v10.value(1, 2)
            local v11 = v10:captureValues("a", "b")
            expect(v11.a).to.equal(1)
            expect(v11.b).to.equal(2)
        end)
    end)
end