--// ReplicatedStorage.SharedPackages._Index.roblox_roact@1.4.4.roact.createSignal.spec (ModuleScript)

return function()
    local v_u_1 = require(script.Parent.createSignal)
    local v_u_2 = require(script.Parent.createSpy)
    it("should fire subscribers and disconnect them", function()
        local v3 = v_u_1()
        local v4 = v_u_2()
        local v5 = v3:subscribe(v4.value)
        expect(v4.callCount).to.equal(0)
        local v6 = {}
        v3:fire(1, v6, "hello")
        expect(v4.callCount).to.equal(1)
        v4:assertCalledWith(1, v6, "hello")
        v5()
        v3:fire()
        expect(v4.callCount).to.equal(1)
    end)
    it("should handle multiple subscribers", function()
        local v7 = v_u_1()
        local v8 = v_u_2()
        local v9 = v_u_2()
        local v10 = v7:subscribe(v8.value)
        local v11 = v7:subscribe(v9.value)
        expect(v8.callCount).to.equal(0)
        expect(v9.callCount).to.equal(0)
        local v12 = {}
        v7:fire(v12, 67)
        expect(v8.callCount).to.equal(1)
        v8:assertCalledWith(v12, 67)
        expect(v9.callCount).to.equal(1)
        v9:assertCalledWith(v12, 67)
        v10()
        v7:fire(67, v12)
        expect(v8.callCount).to.equal(1)
        expect(v9.callCount).to.equal(2)
        v9:assertCalledWith(67, v12)
        v11()
    end)
    it("should stop firing a connection if disconnected mid-fire", function()
        local v13 = v_u_1()
        local v_u_14 = nil
        local v_u_15 = nil
        local v16 = v_u_2(function()
            v_u_15()
        end)
        local v17 = v_u_2(function()
            v_u_14()
        end)
        v_u_14 = v13:subscribe(v16.value)
        v_u_15 = v13:subscribe(v17.value)
        v13:fire()
        expect(v16.callCount + v17.callCount).to.equal(1)
    end)
    it("should allow adding listener in the middle of firing", function()
        local v_u_18 = v_u_1()
        local v_u_19 = nil
        local v_u_20 = v_u_2()
        local v21 = v_u_18:subscribe(function(_, _)
            v_u_19 = v_u_18:subscribe(v_u_20.value)
        end)
        expect(v_u_20.callCount).to.equal(0)
        local v22 = {}
        v_u_18:fire(v22, 67)
        expect(v_u_20.callCount).to.equal(0)
        v_u_18:fire(67, v22)
        expect(v_u_20.callCount).to.equal(1)
        v_u_20:assertCalledWith(67, v22)
        v_u_19()
        v21()
        v_u_18:fire(v22)
        expect(v_u_20.callCount).to.equal(1)
    end)
    it("should have one connection instance when add the same listener multiple times", function()
        local v23 = v_u_1()
        local v24 = v_u_2()
        local v25 = v23:subscribe(v24.value)
        expect(v24.callCount).to.equal(0)
        local v26 = {}
        v23:fire(v26, 67)
        expect(v24.callCount).to.equal(1)
        v24:assertCalledWith(v26, 67)
        local v27 = v23:subscribe(v24.value)
        v23:fire(67, v26)
        expect(v24.callCount).to.equal(2)
        v24:assertCalledWith(67, v26)
        v27()
        v23:fire(v26)
        expect(v24.callCount).to.equal(2)
        v25()
        v23:fire(v26)
        expect(v24.callCount).to.equal(2)
    end)
end