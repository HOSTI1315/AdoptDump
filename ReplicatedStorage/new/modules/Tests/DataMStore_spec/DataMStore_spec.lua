--// ReplicatedStorage.new.modules.Tests.DataMStore.spec (ModuleScript)

return function()
    describe("store slot", function()
        local v1 = require(script.Parent.Parent.LegacyLoad)
        local v2 = v1("Class")
        local v_u_3 = v1("DataMStore")
        local v_u_4 = nil
        local v_u_5 = v2("TestClass")
        beforeEach(function()
            v_u_4 = v_u_3.new()
        end)
        afterEach(function()
            if v_u_4 and not v_u_4.destroyed then
                v_u_4:destroy()
                v_u_4 = nil
            end
        end)
        it("should inject a store_slot value if a Class is detected", function()
            local v6 = v_u_5.new()
            v_u_4:set("test_key", v6)
            expect(v6.store_slot).to.be.ok()
        end)
        it("should create a new store_slot if a new Class is created", function()
            local v7 = v_u_5.new()
            local v8 = v_u_5.new()
            v_u_4:set("test_key", v7)
            v_u_4:set("test_key", v8)
            expect(v7.store_slot).never.to.equal(v8.store_slot)
        end)
        it("should delete the store_slot if the key is deleted", function()
            local v9 = v_u_5.new()
            v_u_4:set("test_key", v9)
            v_u_4:set("test_key", nil)
            expect(v9.store_slot).never.to.be.ok()
        end)
        it("should delete all store_slots if the store is destroyed", function()
            local v10 = v_u_5.new()
            local v11 = v_u_5.new()
            v_u_4:set("test_key", v10)
            v_u_4:set("test_key_2", v10)
            v_u_4:destroy()
            expect(v10.store_slot).never.to.be.ok()
            expect(v11.store_slot).never.to.be.ok()
        end)
        it("should not allow dangling Classes to reference store_slot", function()
            local v12 = v_u_5.new()
            local v13 = v_u_5.new()
            v_u_4:set("test_key", v12)
            v_u_4:set("test_key", v13)
            v_u_4:set("test_key", nil)
            v_u_4:destroy()
            expect(v12.store_slot).never.to.be.ok()
            expect(v13.store_slot).never.to.be.ok()
        end)
    end)
end